////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1.3 #a sum-of-squares between max in 3 numbers
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(define (square x) (* x x))
(define (sum-of-squares x y)(+ (square x) (square y)))
(define (f a b c)(cond
                   ((and (>= a c) (>= b c))(sum-of-squares a b))
                   ((and (>= a b)(>= c b))(sum-of-squares a c))
                   (else (sum-of-squares b c))))
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  1.7 #a better improve method
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(define (square x)(* x x))
(define (abs x)
  (if (< x 0)(- x)
      x))
(define (average x y)
  (/(+ x y) 2))
(define (improve guess x)
  (average guess (/ x guess)))
(define (good-enough? p-guess guess)
  (< (abs (/ (- guess p-guess) p-guess)) 0.001))
  (define (sqrt-iter guess p-guess x)
    (if (good-enough? p-guess guess)
        guess
        (sqrt-iter (improve guess x) guess x)))
(define(sqrt x)
  (sqrt-iter 1.0 0.5 x))
  //////// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  1.8 #Newton's method for cube root's
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

(define (square x)(* x x))
(define (abs x)
  (if (< x 0)(- x)
      x))
(define (average x y)
  (/(+ x y) 3))
(define (improve guess x)
  (average (/ x (square guess)) (* guess 2)))
(define (good-enough? p-guess guess)
  (< (abs (/ (- guess p-guess) p-guess)) 0.00000001))
  (define (cube-iter guess p-guess x)
    (if (good-enough? p-guess guess)
        guess
        (cube-iter (improve guess x) guess x)))
(define(cube x)
  (cube-iter 1.0 0.5 x))
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1.9 #finding sqrt via lexical scoping (https://ghostbin.com/paste/pcz5k)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
      guess
      (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 #factorial (different from book, + lexical scoping(block structure))
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
(define (factorial n)
  (define (fact-iter counter product)
    (if (= counter  (+ n 1))
        product
        (fact-iter (+ counter 1)(* product counter))))
  (fact-iter 1 1))

